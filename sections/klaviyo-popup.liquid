{{ 'klaviyo-popup.css' | asset_url | stylesheet_tag }}

{%- if section.settings.enable_popup -%}
{%- if section.settings.klaviyo_api_key != blank -%}
<script async type="text/javascript" src="https://static.klaviyo.com/onsite/js/klaviyo.js?company_id={{ section.settings.klaviyo_api_key }}"></script>
{%- endif -%}
<div
  class="klaviyo-popup-modal"
  id="klaviyo-popup-{{ section.id }}"
  data-popup-delay="{{ section.settings.popup_delay }}"
  data-popup-trigger="{{ section.settings.popup_trigger }}"
  data-scroll-percentage="{{ section.settings.scroll_percentage }}"
  data-exit-intent="{{ section.settings.exit_intent }}"
  data-show-once="{{ section.settings.show_once }}"
>
  <div class="klaviyo-popup-overlay"></div>
  <div class="klaviyo-popup-container">
    <button class="klaviyo-popup-close" aria-label="Close popup">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    <div class="klaviyo-popup-content">
      {{ section.settings.klaviyo_embed_code }}
    </div>
  </div>
</div>

<script>
(function() {
  const popup = document.getElementById('klaviyo-popup-{{ section.id }}');
  if (!popup) return;

  const overlay = popup.querySelector('.klaviyo-popup-overlay');
  const closeBtn = popup.querySelector('.klaviyo-popup-close');
  const trigger = popup.dataset.popupTrigger;
  const delay = parseInt(popup.dataset.popupDelay) * 1000;
  const scrollPercentage = parseInt(popup.dataset.scrollPercentage);
  const exitIntent = popup.dataset.exitIntent === 'true';
  const showOnce = popup.dataset.showOnce === 'true';
  const storageKey = 'klaviyo-popup-{{ section.id }}-shown';
  let isFormReady = false;

  // Wait for Klaviyo form to be rendered
  function waitForKlaviyoForm() {
    const contentContainer = popup.querySelector('.klaviyo-popup-content');
    if (!contentContainer) return false;

    // Check if there's actual content inside (form elements)
    const hasForm = contentContainer.querySelector('form') ||
                    contentContainer.querySelector('[class*="klaviyo-form"]') ||
                    contentContainer.querySelector('input, button');

    return hasForm !== null;
  }

  // Check form readiness with observer
  const observer = new MutationObserver(function() {
    if (waitForKlaviyoForm()) {
      isFormReady = true;
      observer.disconnect();
    }
  });

  observer.observe(popup.querySelector('.klaviyo-popup-content'), {
    childList: true,
    subtree: true
  });

  // Initial check
  if (waitForKlaviyoForm()) {
    isFormReady = true;
  }

  function showPopup() {
    if (showOnce && localStorage.getItem(storageKey)) return;

    // Only show popup if form is ready
    if (!isFormReady) {
      console.warn('Klaviyo form not ready yet, waiting...');
      // Retry after a short delay
      setTimeout(showPopup, 500);
      return;
    }

    popup.classList.add('active');
    document.body.style.overflow = 'hidden';
    if (showOnce) localStorage.setItem(storageKey, 'true');
  }

  function closePopup() {
    popup.classList.remove('active');
    document.body.style.overflow = '';
  }

  // Close handlers
  closeBtn.addEventListener('click', closePopup);
  overlay.addEventListener('click', closePopup);

  // Trigger logic
  if (trigger === 'delay') {
    setTimeout(showPopup, delay);
  } else if (trigger === 'scroll') {
    window.addEventListener('scroll', function() {
      const scrolled = (window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100;
      if (scrolled >= scrollPercentage) {
        showPopup();
        window.removeEventListener('scroll', arguments.callee);
      }
    });
  } else if (trigger === 'immediate') {
    setTimeout(showPopup, 500);
  }

  // Exit intent
  if (exitIntent) {
    document.addEventListener('mouseout', function(e) {
      if (e.clientY < 0) {
        showPopup();
        document.removeEventListener('mouseout', arguments.callee);
      }
    });
  }

  // ESC key to close
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && popup.classList.contains('active')) {
      closePopup();
    }
  });

  // Phone number validation
  function validatePhoneNumber(phoneNumber) {
    // Remove all non-digit characters except + at the start
    const cleaned = phoneNumber.replace(/[^\d+]/g, '');

    // International format: must start with + and have 7-15 digits
    // Allows formats like: +1234567890, +44 20 1234 5678, etc.
    const internationalPattern = /^\+\d{7,15}$/;

    return internationalPattern.test(cleaned);
  }

  function addPhoneValidation() {
    const phoneInput = popup.querySelector('#phone_number_01K6FRB02HPPKJ92PX7FC5QW4R');
    if (!phoneInput) return;

    const form = phoneInput.closest('form');
    if (!form) return;

    // Create error message element
    let errorMsg = phoneInput.parentElement.querySelector('.phone-error-message');
    if (!errorMsg) {
      errorMsg = document.createElement('div');
      errorMsg.className = 'phone-error-message';
      errorMsg.style.color = '#d43c3c';
      errorMsg.style.fontSize = '14px';
      errorMsg.style.marginTop = '4px';
      errorMsg.style.display = 'none';
      errorMsg.textContent = 'Please enter a valid international phone number (e.g., +1234567890)';
      phoneInput.parentElement.appendChild(errorMsg);
    }

    // Validation handler
    function handleValidation(e) {
      const phoneValue = phoneInput.value.trim();

      if (phoneValue && !validatePhoneNumber(phoneValue)) {
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
        errorMsg.style.display = 'block';
        phoneInput.style.borderColor = '#d43c3c';
        phoneInput.focus();
        return false;
      } else {
        errorMsg.style.display = 'none';
        phoneInput.style.borderColor = '';
      }
    }

    // Capture submit event in capture phase (before Klaviyo)
    form.addEventListener('submit', handleValidation, true);

    // Also add in bubble phase as backup
    form.addEventListener('submit', handleValidation, false);

    // Intercept submit button clicks directly
    const submitButtons = form.querySelectorAll('button[type="submit"], input[type="submit"]');
    submitButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        const phoneValue = phoneInput.value.trim();
        if (phoneValue && !validatePhoneNumber(phoneValue)) {
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();
          errorMsg.style.display = 'block';
          phoneInput.style.borderColor = '#d43c3c';
          phoneInput.focus();
          return false;
        }
      }, true);
    });

    // Clear error on input
    phoneInput.addEventListener('input', function() {
      errorMsg.style.display = 'none';
      phoneInput.style.borderColor = '';
    });
  }

  // Wait for form to be ready, then add validation
  const validationObserver = new MutationObserver(function() {
    const phoneInput = popup.querySelector('#phone_number_01K6FRB02HPPKJ92PX7FC5QW4R');
    if (phoneInput) {
      addPhoneValidation();
      validationObserver.disconnect();
    }
  });

  validationObserver.observe(popup.querySelector('.klaviyo-popup-content'), {
    childList: true,
    subtree: true
  });

  // Try immediately in case form is already loaded
  if (popup.querySelector('#phone_number_01K6FRB02HPPKJ92PX7FC5QW4R')) {
    addPhoneValidation();
  }
})();
</script>
{%- endif -%}

{% schema %}
{
  "name": "Klaviyo Popup",
  "tag": "section",
  "class": "section-klaviyo-popup",
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_popup",
      "label": "Enable popup",
      "default": true
    },
    {
      "type": "text",
      "id": "klaviyo_api_key",
      "label": "Klaviyo Company/Public API Key",
      "info": "Find this in Klaviyo under Settings > Account > API Keys (Company ID or Public API Key starting with your site ID)"
    },
    {
      "type": "html",
      "id": "klaviyo_embed_code",
      "label": "Klaviyo embed code",
      "info": "Paste your Klaviyo embedded form code here"
    },
    {
      "type": "select",
      "id": "popup_trigger",
      "label": "Popup trigger",
      "options": [
        {
          "value": "immediate",
          "label": "Immediate (on page load)"
        },
        {
          "value": "delay",
          "label": "Time delay"
        },
        {
          "value": "scroll",
          "label": "Scroll percentage"
        }
      ],
      "default": "delay"
    },
    {
      "type": "range",
      "id": "popup_delay",
      "label": "Delay (seconds)",
      "min": 0,
      "max": 60,
      "step": 1,
      "default": 5,
      "info": "Only applies when 'Time delay' is selected"
    },
    {
      "type": "range",
      "id": "scroll_percentage",
      "label": "Scroll percentage",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 50,
      "unit": "%",
      "info": "Only applies when 'Scroll percentage' is selected"
    },
    {
      "type": "checkbox",
      "id": "exit_intent",
      "label": "Enable exit intent",
      "default": false,
      "info": "Show popup when user moves cursor to leave the page"
    },
    {
      "type": "checkbox",
      "id": "show_once",
      "label": "Show only once per visitor",
      "default": true,
      "info": "Uses browser localStorage to remember if popup was shown"
    }
  ],
  "presets": [
    {
      "name": "Klaviyo Popup"
    }
  ]
}
{% endschema %}
